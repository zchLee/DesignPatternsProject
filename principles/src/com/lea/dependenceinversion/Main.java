package com.lea.dependenceinversion;

/**
 * @author lzc
 * @create 2020-10-18 16:07
 * 依赖倒置原则（Dependence Inversion Principle, DIP）
 *      1.高层模块不应该依赖低层模块，两者都应该依赖其抽象
 *      2.抽象不应该依赖细节
 *      3.细节应该依赖细节
 *  怎么理解：
 *      高层模块和低层模块容易理解，每个逻辑实现都是由原子逻辑组成，不可分割的原子逻辑就是低层模块，原子模块在组装就是高层
 *    模块。
 *    抽象：在java语言中，抽象是指接口和抽象类，两者都是不能直接被实例化
 *    细节：在java语言中，就是实现类，实现接口或实现抽象类而产生的类就是细节，能直接被实例化，new或其他方式新建对象
 * 依赖倒置原则在java语言中表现：
 *   1）模块间的依赖通过抽象发生，实现类之间不发生直接的依赖关系，其依赖是通过接口或抽象类产生
 *   2）接口或抽象类不依赖实现类
 *   3）实现类依赖接口或抽象类
 *
 *  本质：
 *      依赖倒置本质就是通过抽象（接口或抽象类），使各个类或模块的实现彼此独立。不互相影响，实现模块间的松耦合
 *
 *
 *  依赖是可以传递的: A依赖B，B又依赖C，C又依赖D，生生不息，依赖不止。记住一点，只要做到抽象依赖，即使多层的依赖传递也无惧
 *  对象的依赖关系有三种方式传递
 *  1.构造函数传递依赖对象
 *      在类中通过构造函数声明依赖对象，按照依赖注入的说法，这种注入叫构造函数注入，改造ZhangSan类
 *  2. set方法传递依赖
 *      在抽象类setter方法声明依赖关系 改造IDriver
 *  3. 接口式传递依赖
 *      在接口方法中声明依赖对象
 *
 */
public class Main {
}
