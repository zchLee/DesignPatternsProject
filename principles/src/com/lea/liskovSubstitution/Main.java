package com.lea.liskovSubstitution;

/**
 * @author lzc
 * @create 2020-10-18 11:49
 *
 * 继承有一些优点：
 *      1. 提高代码的重用性，子类拥有父类的方法和属性；
 *      2. 提高代码的可扩展性，子类可形似于父类，但异于父类，保留自我的特性；
 * 缺点：侵入性、不够灵活、高耦合
 *      1. 继承是侵入性的，只要继承就必须拥有父类的所有方法和属性，在一定程度上约束了子类，降低了代码的灵活性；
 *      2. 增加了耦合，当父类的常量、变量或者方法被修改了，需要考虑子类的修改，所以一旦父类有了变动，很可能会造成
 *         非常糟糕的结果，要重构大量的代码。
 * 继承有利也有弊，但总体上利大于弊。如何让继承的利最大化。解决方案就是引入里士替换原则
 *
 * 什么是里士替换原则（liskov substitution principle, LSP）
 *      第一种定义：如果每个类型为S的独享o1, 都有类型为T的对象o2，使得以T定义的所有程序P在所有对象o1都替换成o2，程序P的
 *          行为没有发生变化，那么类型S是类型T的子类型。
 *      第二种定义：所有引用基类的地方必须能透明地使用其他子类的对象
 *
 *     通俗来讲
 *       任何基类可以出现的地方，子类一定可以出现。
 *       里氏替换原则是继承复用的基石，只有当衍生类可以替换基类，软件单位的功能不受到影响时，
 *       即基类随便怎么改动子类都不受此影响，那么基类才能真正被复用
 *
 *  里士替换原则为良好的继承定义了一个规范，一个简单的定义包含了4层含义：
 *     1. 子类必须完全实现父类的方法                   见 package1
 *     2. 子类可以有自己的个性                        见 package2
 *     3. 覆盖或实现父类的方法时输入参数可以方法         见 package3
 *     4. 重写或实现父类的方法时输出结果可以被缩小        见 package4
 */
public class Main {
}
