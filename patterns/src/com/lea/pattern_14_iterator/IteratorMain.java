package com.lea.pattern_14_iterator;

/**
 * @author lzc
 * @create 2020-11-21 13:35
 * 迭代器模式：【已经是一个没落的模式，基本上没人会单独写一个迭代器，除非是产品性质的开发，其定义如下】
 *      它提供一种方法访问一个容器中各个元素，而不需要暴露该对象的内部细节
 *  迭代器为容器服务。容器指能容纳对象的所有类型。迭代器就是为了解决遍历这些容器中的元素而诞生的。
 *
 *  从前任案例中，看到 封装后的 Ex类只要管理增伤元素就可以，需要遍历时，交由迭代器进行。
 *  其中各个角色来看看：
 *      Iterator抽象迭代器
 *          抽象迭代器负责定义访问和遍历元素的接口，基本上是三个固定的3个方法
 *          hasNext()\ next() \ remove()
 *      ConcreteIterator具体迭代器
 *          具体迭代器角色要实现迭代器接口，完成容器元素的遍历
 *      Aggregate抽象容器
 *          容器角色负责创建具体迭代器角色的接口，必然提供类似iterator方法() 这样的方法，
 *          在java中一般是iterator
 *      ConcreteAggregate具体容器
 *          具体容器实现容器接口定义的方法，创建出容纳迭代器的对象
 *
 *   java有Iterator接口，可以不用写，而且迭代器模式基本在高级语言中 出现的挺多
 *
 */
public class IteratorMain {


}
