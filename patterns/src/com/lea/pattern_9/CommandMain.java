package com.lea.pattern_9;

/**
 * @author lzc
 * @create 2020-11-17 09:45
 * 命令模式：
 *      将一个请求封装成对象，从而让你使用不同的请求把客户端参数化，对请求排队或者记录请求日志，
 *      可以提供命令的撤销和恢复
 * 有三个角色：
 *      Receive接收者角色
 *          干活的角色，命令传递到这里是应该被执行的，具体到我们上面的Group具体实现类
 *      Command命令角色
 *          需要执行所有的角色命令都在这里声明
 *      Invoker调用者角色
 *          接受命令，并执行命令
 *
 * 命令模式的优点：
 *      类间的解耦：
 *          调用者与接收者角色之间没有任何依赖关系，调用者实现功能时，只须调用Command抽象类的execute() 方法
 *          不需要了解到底是哪个接受者执行了
 *       可扩展性：
 *          命令的子类扩展异常简单，而调用者Invoker和高层次的模块不产生严重的代码耦合
 *        命令模式结合其他模式更优秀：
 *          命令模式结合责任链模式，实现命令族解析任务；
 *          结合模板方法模式，则可以减少Command子类的膨胀问题
 * 缺点：
 *      如果命令过多，command子类就会疯狂膨胀
 *
 * 命令模式使用的场景：
 *      只要是你认为是命令的地方都可以使用命令模式
 */
public class CommandMain {
}
