package com.lea.pattern_13_adapter;

/**
 * @author lzc
 * @create 2020-11-20 10:19
 * 适配器模式：
 *  将一个类的接口变换成客户端期待的另一种接口，从而使原本因接口不匹配无法在一起工作的两个类能够一起工作
 * 简单的说，适配器模式就是把一个接口或类转换成其他的接口或类，从另一个方面来说，适配器模式也就是一个包装模式
 *
 * 先说说适配器的三个角色（类适配器）
 *      1. Target目标角色
 *      该角色定义其他类转换为何种接口，也就是我们的期望接口
 *      2. Source源角色
 *      把一个类转换转换成目标角色，这个类就是源角色，它是已经存在，且运行良好，经过适配器角色的包装，它
 *      会称为一个崭新、靓丽的角色
 *      3. Adapter适配器角色
 *      适配器模式的核心角色，其他两个角色都是已经存在的角色，而适配器角色是需要建立的，它的职责非常简单。
 *      把源角色转换为目标角色。通过继承和实现来转换
 *
 * 优点：
 *      1.适配器可以让两个没有任何关系的类一起运行，只要适配器这个角色能够搞定他们就成
 *      2.增加了类的透明性
 *      3.提高类的复用度
 *          源角色在原有的系统中还是可以正常使用，而目标角色中也可以充当新的演员
 *      4.灵活性非常好
 *          如果不想要了，直接删除这个适配器类就好了
 * 适配器应用的场景：
 *      当你有动机修改一个已经投产中的接口时，适配器模式可能是最适合的模式。
 *      比如系统扩展了，需要使用一个已有或新建立的类，但这个类又不符合新系统的接口，怎么办？使用适配器模式
 *
 * 注意事项：
 *      当一个项目在详细设计时最好不要考虑使用它，它不是为了解决还处在开发阶段的问题，而是解决正在
 *      服役的项目问题，没有一个系统分析师会在做详细设计的时候使用适配器模式，这个模式使用的主要场景，是扩展应用中
 *
 *      ！ 当项目没有尊徐依赖倒置原则和里士替换原则时，在使用适配器模式仍然会带来非常大的改动
 *
 * 适配器模式的扩展
 *      拿员工信息的例子来讲，如果外调公司的人员信息不止一个接口，基本用户信息一个接口，家庭信息一个接口，工作信息一个接口
 *      怎么整？ java不支持多继承
 *      见 expand 包，对象适配器
 *
 */
public class AdapterMain {
}
